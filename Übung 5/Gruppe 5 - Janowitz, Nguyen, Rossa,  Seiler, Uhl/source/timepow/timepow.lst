GAS LISTING timepow.s 			page 1


   1              	# Systemnahe Programmierung - Testen Sie Ihre Kenntnisse!
   2              	# H. Hoegl, 2012-11-08 
   3              	
   4              	#   timespow(3, 2) + timespow(2, 3)
   5              	
   6              	    .section .data
   7              	    .section .text
   8              	    .globl _start
   9              	
  10              	_start:
  11 0000 6A01     	    pushl $1        # b
  12 0002 6A07     	    pushl $7        # x
  13 0004 E81A0000 	    call  timespow2
  13      00
  14 0009 83C408   	    addl  $8, %esp  
  15 000c 50       	    pushl %eax      
  16 000d 6A00     	    pushl $0        # b    
  17 000f 6A02     	    pushl $2        # x
  18 0011 E80D0000 	    call  timespow2
  18      00
  19 0016 83C408   	    addl  $8, %esp  
  20 0019 5B       	    popl  %ebx      
  21 001a 01C3     	    addl %eax, %ebx 
  22 001c B8010000 	    movl $1, %eax   
  22      00
  23 0021 CD80     	    int $0x80
  24              	
  25              	
  26              	# timespow2(x, b)
  27              	#   return x * 2^b
  28              	#   Trick: x * 2^b = shift argument x left by b bits 
  29              	#                    shll %cl, %ebx  (shift ebx left by cl bits)
  30              	.type timespow2, @function
  31              	timespow2:
  32 0023 55       	    pushl %ebp		  # 1 Prolog
  33 0024 89E5     	    movl %esp, %ebp	  # 2 Prolog
  34 0026 8B5D0C   	    movl 12(%ebp), %ebx	  # 3 Argument holen 
  35 0029 8A4D08   	    movb 8(%ebp), %cl	  # 4 Argument holen
  36 002c D3E3     	    shll %cl, %ebx	  # 5 Schieben
  37 002e 89D8     	    movl %ebx, %eax	  # 6 Ergebnis ablegen
  38 0030 89EC     	    movl %ebp, %esp	  # 7 Epilog
  39 0032 5D       	    popl %ebp		  # 8 Epilog
  40 0033 C3       	    ret			  # 9 Zurueckkehren
  41              	
