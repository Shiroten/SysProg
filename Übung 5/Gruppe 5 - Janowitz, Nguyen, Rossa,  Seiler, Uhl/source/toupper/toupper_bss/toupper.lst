GAS LISTING toupper.s 			page 1


   1              	# -*- indent-tabs-mode: nil -*- (for Emacs)
   2              		
   3              	# PURPOSE: This program converts an input file
   4              	# to an output file with all letters
   5              	# converted to uppercase.
   6              	#
   7              	# PROCESSING:
   8              	# 1) Open the input file
   9              	# 2) Open the output file
  10              	# 4) While we're not at the end of the input file
  11              	#    a) read part of file into our memory buffer
  12              	#    b) go through each byte of memory
  13              	#       if the byte is a lower-case letter,
  14              	#       convert it to uppercase
  15              	#    c) write the memory buffer to output file
  16              	
  17              	        
  18              	        .section .data
  19              	
  20              	        #######CONSTANTS########
  21              	        # system call numbers
  22              	        .equ SYS_OPEN, 5
  23              	        .equ SYS_WRITE, 4
  24              	        .equ SYS_READ, 3
  25              	        .equ SYS_CLOSE, 6
  26              	        .equ SYS_EXIT, 1
  27              	
  28              	        # options for open (look at
  29              	        # /usr/include/asm/fcntl.h for
  30              	        # various values. You can combine them
  31              	        # by adding them or ORing them)
  32              	        # This is discussed at greater length
  33              	        # in "Counting Like a Computer"
  34              	        .equ O_RDONLY, 0
  35              	        .equ O_CREAT_WRONLY_TRUNC, 03101
  36              	
  37              	        # standard file descriptors
  38              	        .equ STDIN, 0
  39              	        .equ STDOUT, 1
  40              	        .equ STDERR, 2
  41              	
  42              	        # system call interrupt
  43              	        .equ LINUX_SYSCALL, 0x80
  44              	        .equ END_OF_FILE, 0 #This is the return value
  45              	
  46              	        # of read which means we've
  47              	        # hit the end of the file
  48              	        .equ NUMBER_ARGUMENTS, 2
  49              	
  50              	        .section .bss
  51              	
  52              	        # Buffer - this is where the data is loaded into
  53              	        # from the data file and written from
  54              	        # into the output file. This should
  55              	        # never exceed 16,000 for various
  56              	        # reasons.
  57              	        .equ BUFFER_SIZE, 500
GAS LISTING toupper.s 			page 2


  58              	        .lcomm BUFFER_DATA, BUFFER_SIZE
  59              	        .lcomm FILEIN, 4
  60              	        .lcomm FILEOUT, 5
  61              	
  62              	        .section .text
  63              	
  64              	        # STACK POSITIONS
  65              	        .equ ST_SIZE_RESERVE, 8
  66              	        .equ ST_FD_IN, -4
  67              	        .equ ST_FD_OUT, -8
  68              	        .equ ST_ARGC, 0         # Number of arguments
  69              	        .equ ST_ARGV_0, 4       # Name of program
  70              	        .equ ST_ARGV_1, 8       # Input file name
  71              	        .equ ST_ARGV_2, 12      # Output file name
  72              	        .globl _start
  73              	
  74              	_start:
  75              	        ### INITIALIZE PROGRAM ###
  76              	        # save the stack pointer        
  77              	
  78 0000 89E5     	        movl %esp, %ebp
  79              	
  80              	        # Allocate space for our file descriptors
  81              	        # on the stack
  82 0002 83EC08   	        subl $ST_SIZE_RESERVE, %esp
  83              	
  84              	open_files:
  85              	open_fd_in:
  86              		                ### OPEN INPUT FILE ###
  87              	                        # open syscall
  88 0005 B8050000 	        movl $SYS_OPEN, %eax
  88      00
  89              	                        # input filename into %ebx
  90 000a 8B5D08   	        movl ST_ARGV_1(%ebp), %ebx
  91              	                        # read-only flag
  92 000d B9000000 	        movl $O_RDONLY, %ecx
  92      00
  93              	                        # this doesn't really matter for reading
  94 0012 BAB60100 	        movl $0666, %edx
  94      00
  95              	                        # call Linux
  96 0017 CD80     	        int $LINUX_SYSCALL
  97              	store_fd_in:
  98              	                        # save the given file descriptor
  99 0019 A3F40100 	        movl %eax, FILEIN
  99      00
 100              	
 101              	open_fd_out:
 102              	                                ### OPEN OUTPUT FILE ###
 103              	                                # open the file
 104 001e B8050000 	        movl $SYS_OPEN, %eax
 104      00
 105              	                                # output filename into %ebx
 106 0023 8B5D0C   	        movl ST_ARGV_2(%ebp), %ebx
 107              	                                # flags for writing to the file
 108 0026 B9410600 	        movl $O_CREAT_WRONLY_TRUNC, %ecx
 108      00
GAS LISTING toupper.s 			page 3


 109              	                                # mode for new file (if it's created)
 110 002b BAB60100 	        movl $0666, %edx
 110      00
 111              	                                # call Linux
 112 0030 CD80     	        int $LINUX_SYSCALL
 113              	
 114              	store_fd_out:
 115              	                                # store the file descriptor here
 116 0032 A3F80100 	        movl %eax, FILEOUT
 116      00
 117              	                                # BEGIN MAIN LOOP
 118              	read_loop_begin:
 119              	                                   # READ IN A BLOCK FROM THE INPUT FILE 
 120 0037 B8030000 	        movl $SYS_READ, %eax
 120      00
 121 003c 8B1DF401 	        movl FILEIN, %ebx          # get the input file descriptor
 121      0000
 122 0042 B9000000 	        movl $BUFFER_DATA, %ecx    # the location to read into
 122      00
 123 0047 BAF40100 	        movl $BUFFER_SIZE, %edx    # the size of the buffer
 123      00
 124 004c CD80     	        int $LINUX_SYSCALL         # Size of buffer read is returned in %eax
 125 004e 83F800   	        cmpl $END_OF_FILE, %eax    # check for end of file marker
 126              	                                   # if found or on error, go to the end
 127 0051 7E25     	        jle end_loop
 128              	continue_read_loop:
 129              	        ### CONVERT THE BLOCK TO UPPER CASE ###
 130 0053 68000000 	        pushl $BUFFER_DATA      # location of buffer
 130      00
 131 0058 50       	        pushl %eax              # size of the buffer
 132 0059 E8400000 	        call convert_to_upper
 132      00
 133 005e 58       	        popl %eax               # get the size back
 134 005f 83C404   	        addl $4, %esp           # restore %esp
 135              	        ### WRITE THE BLOCK OUT TO THE OUTPUT FILE ###
 136 0062 89C2     	        movl %eax, %edx         # size of the buffer
 137 0064 B8040000 	        movl $SYS_WRITE, %eax
 137      00
 138 0069 8B1DF801 	        movl FILEOUT, %ebx      # file to use
 138      0000
 139 006f B9000000 	        movl $BUFFER_DATA, %ecx     # location of the buffer
 139      00
 140 0074 CD80     	        int $LINUX_SYSCALL
 141 0076 EBBF     	        jmp read_loop_begin
 142              	
 143              	end_loop:
 144              	                                ###CLOSE THE FILES###
 145              	                                # NOTE - we don't need to do error checking
 146              	                                # on these, because error conditions
 147              	                                # don't signify anything special here
 148 0078 B8060000 	        movl $SYS_CLOSE, %eax
 148      00
 149 007d 8B1DF801 	        movl FILEOUT, %ebx
 149      0000
 150 0083 CD80     	        int $LINUX_SYSCALL
 151 0085 B8060000 	        movl $SYS_CLOSE, %eax
 151      00
GAS LISTING toupper.s 			page 4


 152 008a 8B1DF401 	        movl FILEIN, %ebx
 152      0000
 153 0090 CD80     	        int $LINUX_SYSCALL
 154              	                                ### EXIT ###
 155 0092 B8010000 	        movl $SYS_EXIT, %eax
 155      00
 156 0097 BB000000 	        movl $0, %ebx
 156      00
 157 009c CD80     	        int $LINUX_SYSCALL
 158              	
 159              	        
 160              	#PURPOSE: This function actually does the
 161              	# conversion to upper case for a block
 162              	#
 163              	#INPUT: The first parameter is the location
 164              	
 165              	# of the block of memory to convert
 166              	# The second parameter is the length of
 167              	# that buffer
 168              	#
 169              	#OUTPUT: This function overwrites the current
 170              	# buffer with the upper-casified version.
 171              	#
 172              	#VARIABLES:
 173              	# %eax - beginning of buffer
 174              	# %ebx - length of buffer
 175              	# %edi - current buffer offset
 176              	# %cl - current byte being examined
 177              	# (first part of %ecx)
 178              	
 179              	        ### CONSTANTS ##
 180              	                                # The lower boundary of our search
 181              	        .equ LOWERCASE_A, 'a'
 182              	                                # The upper boundary of our search
 183              	        .equ LOWERCASE_Z, 'z'
 184              	                                # Conversion between upper and lower case
 185              	        .equ UPPER_CONVERSION, 'A' - 'a'
 186              	                                ### STACK STUFF ###
 187              	        .equ ST_BUFFER_LEN, 8   # Length of buffer
 188              	        .equ ST_BUFFER, 12      # actual buffer
 189              	convert_to_upper:
 190 009e 55       	        pushl %ebp
 191 009f 89E5     	        movl %esp, %ebp
 192              	                        ### SET UP VARIABLES ###
 193 00a1 8B450C   	        movl ST_BUFFER(%ebp), %eax
 194 00a4 8B5D08   	        movl ST_BUFFER_LEN(%ebp), %ebx
 195 00a7 BF000000 	        movl $0, %edi
 195      00
 196              	
 197              	                        # if a buffer with zero length was given
 198              	                        # to us, just leave
 199 00ac 83FB00   	        cmpl $0, %ebx
 200 00af 7418     	        je end_convert_loop
 201              	convert_loop:
 202              	                        # get the current byte
 203 00b1 8A0C38   	        movb (%eax,%edi,1), %cl
 204              	                        # go to the next byte unless it is between
GAS LISTING toupper.s 			page 5


 205              	                        #'a' and 'z'
 206 00b4 80F961   	        cmpb $LOWERCASE_A, %cl
 207 00b7 7C0B     	        jl next_byte
 208 00b9 80F97A   	        cmpb $LOWERCASE_Z, %cl
 209 00bc 7F06     	        jg next_byte
 210              	                        # otherwise convert the byte to uppercase
 211 00be 80C1E0   	        addb $UPPER_CONVERSION, %cl
 212              	                        # and store it back
 213 00c1 880C38   	        movb %cl, (%eax,%edi,1)
 214              	
 215              	next_byte:
 216 00c4 47       	        incl %edi #next byte
 217 00c5 39FB     	        cmpl %edi, %ebx #continue unless
 218              	                        # we've reached the end
 219 00c7 75E8     	        jne convert_loop
 220              	end_convert_loop:
 221              	                        # no return value, just leave
 222 00c9 89EC     	        movl %ebp, %esp
 223 00cb 5D       	        popl %ebp
 224 00cc C3       	        ret
 225              	        
 226              	# vim: expandtab sw=8 sts=8
